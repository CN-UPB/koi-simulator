//
// Generated file, do not edit! Created by opp_msgc 4.3 from ClusterMessage.msg.
//

#ifndef _CLUSTERMESSAGE_M_H_
#define _CLUSTERMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "cluster.h"
// }}



/**
 * Class generated from <tt>ClusterMessage.msg</tt> by opp_msgc.
 * <pre>
 * message ClusterMessage  {
 *     Cluster c;
 * }
 * </pre>
 */
class ClusterMessage : public ::cMessage
{
  protected:
    Cluster c_var;

  private:
    void copy(const ClusterMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ClusterMessage&);

  public:
    ClusterMessage(const char *name=NULL, int kind=0);
    ClusterMessage(const ClusterMessage& other);
    virtual ~ClusterMessage();
    ClusterMessage& operator=(const ClusterMessage& other);
    virtual ClusterMessage *dup() const {return new ClusterMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Cluster& getC();
    virtual const Cluster& getC() const {return const_cast<ClusterMessage*>(this)->getC();}
    virtual void setC(const Cluster& c);
};

inline void doPacking(cCommBuffer *b, ClusterMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ClusterMessage& obj) {obj.parsimUnpack(b);}


#endif // _CLUSTERMESSAGE_M_H_
