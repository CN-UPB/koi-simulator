// Interface for stream scheduler module
//
// StreamScheduler modules are concerned with assigning streams to resource 
// blocks. They are the core of the Scheduler module, receiving all 
// StreamTransReq messages from MobileStations and BaseStations as well as 
// forwarding StreamTransSched messages generated by RBSchedulers to their 
// destinations. 
//
// At the beginning of each simulation, all MobileStations need to inform 
// their local StreamScheduler about the streams they are going to prdouce.
// This happens with StreamInfo messages generated in the TrafficGen module of 
// each MobileStation. 
//
// After the <tt>initOffset</tt> has passed, the StreamScheduler should 
// schedule all streams, assigning them to a resource block by some 
// scheduling algorithm. After that assignment has been completed, the 
// StreamScheduler awaits the arrival of StreamTransReq messages, which contain 
// the current packets for each stream. These are stored and forwarded to 
// the RBScheduler for their stream in each TTI via a TransReqList message. 
// After the RBSchedulers have completed the schedule, they send StreamTransSched 
// messages to the StreamScheduler, which then forwards them to the appropriate 
// local BaseStation or MobileStation. 
//
// <strong>Note:</strong> All StreamTransReq messages are deleted after being 
// forwarded to the RBScheduler. Thus, MobileStations and BaseStations need 
// to resend their requests at the beginning of each TTI if they have not been
// fullfilled in the previous TTI.
moduleinterface StreamScheduler {
	parameters:
		// Offset from the simulation start reserved for initialization messages.
		// No traffic is generated/send before it.
		double initOffset @unit(s);
		// The number of resource blocks for uplink transmissions
		int upResourceBlocks;
		// The number of resource blocks for downlink transmissions
		int downResourceBlocks;
		// The number of MobileStations in the local cell
		int numberOfMobileStations;
		// The period after which assignments of streams to resource blocks 
		// are recomputed.
		double streamSchedPeriod @unit(s);
		int bsId;
		// Length of single transmission time interval
		double tti @unit(s);
		// A small offset used control message order in cases where ordering 
		// cannot be guaranteed by generation order.
		double epsilon @unit(s);
		// Do Debug output?
		bool debug;
		@display("i=block/dispatch");
	gates:
		// For schedule exchange with the local BaseStation.
		input fromBs;
		// For Scheduling communication with the local MobileStations.
		input fromMs[numberOfMobileStations];
		// For schedule exchange with the local BaseStation.
		output toBs;
		// For Scheduling communication with the local MobileStations.
		output toMs[numberOfMobileStations];
		// For communication with uplink resource schedulers.
		inout upRB[upResourceBlocks];
		// For communication with downlink resource schedulers.
		inout downRB[downResourceBlocks];
}
