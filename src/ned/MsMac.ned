// The Media Access Control module of the MobileStation.
//
// This submodule is the core of the MobileStation. It is responsible for 
// managing internal message flow between the submodules as well as handling 
// simulation information.
//
// The <em>MsMac</em> is also responsible for initially computing and storing 
// a MobileStation's position, if one of the random positioning methods is
// choosen. It also forwards the position to the local BaseStation in the form 
// of a PositionExchange message directly after the initial position has been 
// determined.
// An important point to note is that while the positioning algorithms take 
// the minimum distance to the BaseStation into account, possible minimum 
// distances to neighbouring MobileStations are NOT taken into account. This 
// is especially important for D2D communication, where both sides in a link 
// are mobile stations and their distance plays a part in computations.
//
// It stores traffic packets generated by the <em>app</em> submodule and 
// facilitates their transmission. The transmission process works as follows:
// -# Receive the KoiData packet from the <em>app</em> submodule.
// -# Store the packet in an outbound queue sorted by the stream it belongs to.
// -# Every TTI, send all packet queues for all streams to the scheduler for 
//    consideration in the form of a StreamTransReq message.
// -# Receive the StreamTransSched from the Scheduler module.
// -# Take the packet indicated by the schedule, if any, out of it's queue.
// -# Wrap it in a DataPacketBundle with the resource block indicated by the 
//    schedule and send it to the <em>phy</em> submodule for transmission.
// -# Send a transmission information message (TransInfo) to the local BaseStation for 
//    further dissemination to neighbouring cells
//
// The MsMac also forwards any TransInfo messages from neighbouring cells 
// to the <em>phy</em> module to be used in SINR computations in the MsChannel.
simple MsMac  {
    parameters:
			// The id of the local cell and BaseStation.
			int bsId;
			// The ID of this MobileStation. MobileStation IDs are unique only 
			// within any given cell. Thus, to uniquely identify a MobileStation,
			// it's <tt>bsId</tt> and it's <tt>msId</tt> are needed.
			int msId;
			// The X position of the local BaseStation.
			double initBsXPos;
			// The Y position of the local BaseStation.
			double initBsYPos;
			// The X position of the MobileStation. 
			double initMsXPos = default(0.0);
			// The Y position of the MobileStation. 
			double initMsYPos = default(0.0);
			// The quadrant for initial positioning by sector.
			int initQuadrant;
			// Offset from the simulation start reserved for initialization messages.
			// No traffic is generated/send before it.
			double initOffset @unit(s);
			// Length of single transmission time interval
			double tti @unit(s);
			// Interval between position update messages
			// This parameter currently has no effect as there is no movement 
			// currently implemented.
			int positionResendInterval;
			// The number of MobileStations in the local cell
			int numberOfMobileStations;
			// The alpha angle for initial positioning by sector.
			double initPosAlpha;
			// The beta angle for initial positioning by sector.
			double initPosBeta;
			// The gamma angle for initial positioning by sector.
			double initPosGamma;
			// A small offset used control message order in cases where ordering 
			// cannot be guaranteed by generation order.
			double epsilon @unit(s);
			// The radius of the local cell.
			double radius;
			// The random seed used for initial positioning by sector.
			int PosSeed = (42);
			// The number of downlink (BS->MS) resource blocks.
			int downResourceBlocks;
			// This is the length in Bits for all packets generated at this 
			// mobile station
			int packetLength = default(1500b) @unit(b);
			// The power setting used for transmissions.
			double transmissionPower = default(1.0);
			// The positioning algorithm for MobileStations inside their cell
			// 0 - Uniformely random anywhere in the cell
			// 1 - Use the positions given as OMNet parameters (initMsXPos,initMsXPos)
			// 2 - Use initial placement by sector
			// 3 - Use linear placement simulating a straight road
			// 4 - Use line placement
			int positioning = default(0);

			@display("i=block/mac");

    gates:
			// Messages to the TrafficGen module
			input fromApp;
			// Messages from the TrafficGen module
			output toApp;

			// Connection to the MsPhy for simulation traffic packets
			input fromPhy;
			// Connection to the MsPhy for simulation traffic packets
			output toPhy;

			// Exchange of direct control messages with the local BaseStation.
			// This gate is not intended for use with simulation traffic packets!
			input fromBsMac;
			// Exchange of direct control messages with the local BaseStation.
			// This gate is not intended for use with simulation traffic packets!
			output toBsMac;

	// Communication with the local cell's Scheduler
	input fromScheduler;
	// Communication with the local cell's Scheduler
	output toScheduler;
}
